require('dotenv').config();
const fs = require('fs');
// const readline = require('readline'); // –£–¥–∞–ª–µ–Ω–æ, —Ç–∞–∫ –∫–∞–∫ –±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–µ–Ω –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –≤–≤–æ–¥
const { Wallet } = require('ethers');
const axios = require('axios');
const { HttpsProxyAgent } = require('https-proxy-agent');
const randomUseragent = require('random-useragent');

const colors = {
    reset: "\x1b[0m",
    cyan: "\x1b[36m",
    green: "\x1b[32m",
    yellow: "\x1b[33m",
    red: "\x1b[31m",
    white: "\x1b[37m",
    bold: "\x1b[1m",
    magenta: "\x1b[35m",
    blue: "\x1b[34m",
    gray: "\x1b[90m",
};

// --- –ù–æ–≤—ã–π –õ–æ–≥–≥–µ—Ä ---
const logger = {
    info: (msg) => console.log(`${colors.cyan}[–∏] ${msg}${colors.reset}`), // [–∏] - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    warn: (msg) => console.log(`${colors.yellow}[!] ${msg}${colors.reset}`), // [!] - –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
    error: (msg) => console.log(`${colors.red}[—Ö] ${msg}${colors.reset}`), // [—Ö] - –û—à–∏–±–∫–∞
    success: (msg) => console.log(`${colors.green}[+] ${msg}${colors.reset}`), // [+] - –£—Å–ø–µ—Ö
    loading: (msg) => console.log(`${colors.magenta}[*] ${msg}${colors.reset}`), // [*] - –ó–∞–≥—Ä—É–∑–∫–∞
    step: (msg) => console.log(`${colors.blue}[>] ${colors.bold}${msg}${colors.reset}`), // [>] - –®–∞–≥
    critical: (msg) => console.log(`${colors.red}${colors.bold}[–§–ê–¢–ê–õ–¨–ù–û] ${msg}${colors.reset}`),
    summary: (msg) => console.log(`${colors.green}${colors.bold}[–°–í–û–î–ö–ê] ${msg}${colors.reset}`),
    banner: () => {
        const border = `${colors.blue}${colors.bold}‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó${colors.reset}`;
        const title = `${colors.blue}${colors.bold}‚ïë   üçâ 19Seniman From Insider    üçâ    ‚ïë${colors.reset}`;
        const bottomBorder = `${colors.blue}${colors.bold}‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù${colors.reset}`;
        
        console.log(`\n${border}`);
        console.log(title);
        console.log(`${bottomBorder}\n`);
    },
    section: (msg) => {
        const line = '‚îÄ'.repeat(40);
        console.log(`\n${colors.gray}${line}${colors.reset}`);
        if (msg) console.log(`${colors.white}${colors.bold} ${msg} ${colors.reset}`);
        console.log(`${colors.gray}${line}${colors.reset}\n`);
    },
    countdown: (msg) => process.stdout.write(`\r${colors.blue}[‚è∞] ${msg}${colors.reset}`),
};
// -------------------

const GAMES = {
    '1': { name: 'Snake', gameType: 'snake', referer: 'https://play.irys.xyz/snake', minScore: 100, maxScore: 10000 },
    '2': { name: 'Asteroids', gameType: 'asteroids', referer: 'https://play.irys.xyz/asteroids', minScore: 25000, maxScore: 500000 },
    '3': { name: 'HexShot', gameType: 'hex-shooter', referer: 'https://play.irys.xyz/hexshot', minScore: 18000, maxScore: 100000 },
    '4': { name: 'Missile Command', gameType: 'missile-command', referer: 'https://play.irys.xyz/missile', minScore: 50000, maxScore: 1500000 }
};

const API_BASE_URL = 'https://play.irys.xyz/api/game';
const GAME_COST = 0.001;
const GAMEPLAY_DELAY_MS = 5000;

// –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏
const DAILY_DELAY_MS = 24 * 60 * 60 * 1000; // 24 —á–∞—Å–∞ –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
const DEFAULT_PLAY_COUNT = 1; // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä, –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω–æ –≤ DAILY_PLAY_COUNT –≤ .env

const generateRandomScore = (minScore, maxScore) => Math.floor(Math.random() * (maxScore - minScore + 1)) + minScore;
const sleep = (ms) => new Promise(resolve => setTimeout(resolve, ms));

const playGame = async (privateKey, proxy, accountIndex, gameConfig, playCount) => {
    let wallet;
    try {
        wallet = new Wallet(privateKey);
        const playerAddress = wallet.address;
        const agent = proxy ? new HttpsProxyAgent(proxy) : null;
        
        logger.step(`--- [–ê–∫–∫–∞—É–Ω—Ç ${accountIndex + 1}] –ù–∞—á–∞–ª–æ —Å–µ—Å—Å–∏–∏ –¥–ª—è: ${playerAddress} ---`);
        if (proxy) logger.info(`[–ê–∫–∫–∞—É–Ω—Ç ${accountIndex + 1}] –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∫—Å–∏: ${proxy.split('@').pop()}`);

        for (let gameNum = 1; gameNum <= playCount; gameNum++) {
            const sessionLogPrefix = `[–ê–∫–∫–∞—É–Ω—Ç ${accountIndex + 1}][–ò–≥—Ä–∞ ${gameNum}/${playCount}]`;
            
            const userAgent = randomUseragent.getRandom();
            const headers = { 'Content-Type': 'application/json', 'Referer': gameConfig.referer, 'User-Agent': userAgent };

            const startTimestamp = Date.now();
            const sessionId = `game_${startTimestamp}_${Math.random().toString(36).substring(2, 12)}`;
            const startMessage = `I authorize payment of ${GAME_COST} IRYS to play a game on Irys Arcade.\n \nPlayer: ${playerAddress}\nAmount: ${GAME_COST} IRYS\nTimestamp: ${startTimestamp}\n\nThis signature confirms I own this wallet and authorize the payment.`;
            const startSignature = await wallet.signMessage(startMessage);
            const startPayload = { playerAddress, gameCost: GAME_COST, signature: startSignature, message: startMessage, timestamp: startTimestamp, sessionId, gameType: gameConfig.gameType };

            logger.loading(`${sessionLogPrefix} –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ 'start'...`);
            const startResponse = await axios.post(`${API_BASE_URL}/start`, startPayload, { httpsAgent: agent, headers });

            if (!startResponse.data.success) throw new Error(startResponse.data.message || '–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É.');
            
            const returnedSessionId = startResponse.data.data.sessionId;
            logger.success(`${sessionLogPrefix} –ò–≥—Ä–∞ —É—Å–ø–µ—à–Ω–æ –Ω–∞—á–∞—Ç–∞! ID —Å–µ—Å—Å–∏–∏: ${returnedSessionId}`);

            logger.info(`${sessionLogPrefix} –°–∏–º—É–ª—è—Ü–∏—è –∏–≥—Ä–æ–≤–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –≤ —Ç–µ—á–µ–Ω–∏–µ ${GAMEPLAY_DELAY_MS / 1000} —Å–µ–∫—É–Ω–¥...`);
            await sleep(GAMEPLAY_DELAY_MS);

            const score = generateRandomScore(gameConfig.minScore, gameConfig.maxScore);
            const completeTimestamp = Date.now();
            const completeMessage = `I completed a ${gameConfig.gameType} game on Irys Arcade.\n \nPlayer: ${playerAddress}\nGame: ${gameConfig.gameType}\nScore: ${score}\nSession: ${returnedSessionId}\nTimestamp: ${completeTimestamp}\n\nThis signature confirms I own this wallet and completed this game.`;
            const completeSignature = await wallet.signMessage(completeMessage);
            const completePayload = { playerAddress, gameType: gameConfig.gameType, score, signature: completeSignature, message: completeMessage, timestamp: completeTimestamp, sessionId: returnedSessionId };

            logger.loading(`${sessionLogPrefix} –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ 'complete' —Å–æ —Å—á–µ—Ç–æ–º: ${score}...`);
            const completeResponse = await axios.post(`${API_BASE_URL}/complete`, completePayload, { httpsAgent: agent, headers });

            if (completeResponse.data.success) {
                logger.success(`${sessionLogPrefix} –ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! ${completeResponse.data.message}`);
            } else {
                throw new Error(completeResponse.data.message || '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≤–µ—Ä—à–∏—Ç—å –∏–≥—Ä—É.');
            }

            if (gameNum < playCount) {
                logger.info(`${sessionLogPrefix} –û–∂–∏–¥–∞–Ω–∏–µ 3 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –∏–≥—Ä–æ–π...`);
                await sleep(3000);
            }
        }

    } catch (error) {
        const address = wallet ? wallet.address : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∞–¥—Ä–µ—Å';
        const errorMessage = error.response ? JSON.stringify(error.response.data) : error.message;
        logger.error(`[–ê–∫–∫–∞—É–Ω—Ç ${accountIndex + 1}] (${address}) –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: ${errorMessage}`);
    }
};

// –§—É–Ω–∫—Ü–∏—è getPlayCount —É–¥–∞–ª–µ–Ω–∞, —Ç–∞–∫ –∫–∞–∫ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –≤–≤–æ–¥ –±–æ–ª—å—à–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è.

const main = async () => {
    logger.banner();
    
    // –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.
    const playCount = parseInt(process.env.DAILY_PLAY_COUNT, 10) || DEFAULT_PLAY_COUNT;
    
    // –°–ø–∏—Å–æ–∫ –∫–ª—é—á–µ–π –∏–≥—Ä –≤ –∂–µ–ª–∞–µ–º–æ–º –ø–æ—Ä—è–¥–∫–µ: '1', '2', '3', '4'
    const gameKeys = Object.keys(GAMES).sort(); 
    
    logger.summary(`–†–ï–ñ–ò–ú –ê–í–¢–û–ú–ê–¢–ò–ó–ê–¶–ò–ò (24 –ß–ê–°–ê): –ò–≥—Ä–∞–µ—Ç –≤ ${gameKeys.length} –∏–≥—Ä (${GAMES['1'].name}, ${GAMES['2'].name}, ...) ${playCount} —Ä–∞–∑ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞.`);
    logger.summary(`–°–ª–µ–¥—É—é—â–∏–π —Ü–∏–∫–ª –±—É–¥–µ—Ç –ø–æ–≤—Ç–æ—Ä—è—Ç—å—Å—è –∫–∞–∂–¥—ã–µ ${DAILY_DELAY_MS / (1000 * 60 * 60)} —á–∞—Å–æ–≤.\n`);

    while (true) { // –ë–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è
        
        const startTime = Date.now();
        logger.step('==================================================');
        logger.step(`–ù–ê–ß–ê–õ–û –ï–ñ–ï–î–ù–ï–í–ù–û–ì–û –¶–ò–ö–õ–ê: ${new Date().toISOString()}`);
        logger.step('==================================================');

        try {
            let proxies = [];
            try {
                proxies = fs.readFileSync('proxies.txt', 'utf8').split('\n').filter(p => p.trim() !== '');
                if (proxies.length > 0) logger.info(`–£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ ${proxies.length} –ø—Ä–æ–∫—Å–∏.`);
            } catch {
                logger.warn('–§–∞–π–ª proxies.txt –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –ø—É—Å—Ç. –†–∞–±–æ—Ç–∞ –±–µ–∑ –ø—Ä–æ–∫—Å–∏.');
            }

            const privateKeys = Object.keys(process.env).filter(key => key.startsWith('PRIVATE_KEY_')).map(key => process.env[key]);
            if (privateKeys.length === 0) {
                logger.critical("–ü—Ä–∏–≤–∞—Ç–Ω—ã–µ –∫–ª—é—á–∏ –≤ —Ñ–∞–π–ª–µ .env –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –î–æ–±–∞–≤—å—Ç–µ PRIVATE_KEY_1, PRIVATE_KEY_2 –∏ —Ç.–¥. –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.");
                // –í –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–º —Ä–µ–∂–∏–º–µ –ª—É—á—à–µ –Ω–µ –≤—ã—Ö–æ–¥–∏—Ç—å, –∞ –∂–¥–∞—Ç—å —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ü–∏–∫–ª–∞, –µ—Å–ª–∏ –æ—à–∏–±–∫–∞ –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–∞ –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è.
                // –ù–æ –∑–¥–µ—Å—å, –±–µ–∑ –∫–ª—é—á–µ–π, –Ω–µ—Ç —Å–º—ã—Å–ª–∞ –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å.
                break; 
            }

            logger.info(`–ù–∞–π–¥–µ–Ω–æ ${privateKeys.length} –∫–æ—à–µ–ª—å–∫–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏.`);
            
            // –ü–µ—Ä–µ–±–æ—Ä –∫–∞–∂–¥–æ–≥–æ –ü—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –ö–ª—é—á–∞
            for (let i = 0; i < privateKeys.length; i++) {
                const privateKey = privateKeys[i];
                if (!privateKey) continue;
                
                const proxy = proxies.length > 0 ? proxies[i % proxies.length] : null;

                // –ü–µ—Ä–µ–±–æ—Ä –∫–∞–∂–¥–æ–π –ò–≥—Ä—ã –≤ –ø–æ—Ä—è–¥–∫–µ (1, 2, 3, 4)
                for (const key of gameKeys) {
                    const gameConfig = GAMES[key];
                    
                    logger.section(`[–ê–ö–ö–ê–£–ù–¢ ${i + 1}] –ù–∞—á–∞–ª–æ –∏–≥—Ä—ã: ${gameConfig.name} (–°—á–µ—Ç: ${gameConfig.minScore}-${gameConfig.maxScore})`);
                    
                    // –í—ã–∑–æ–≤ playGame —Å —Ç–µ–∫—É—â–µ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π –∏–≥—Ä—ã
                    await playGame(privateKey, proxy, i, gameConfig, playCount);
                    
                    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–µ—Ä–∂–∫–∏ –º–µ–∂–¥—É —Å–º–µ–Ω–æ–π –∏–≥—Ä
                    logger.info(`[–ê–ö–ö–ê–£–ù–¢ ${i + 1}] –ò–≥—Ä–∞ ${gameConfig.name} –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –û–∂–∏–¥–∞–Ω–∏–µ 10 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –∏–≥—Ä–æ–π...`);
                    await sleep(10000);
                }

                // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –±–æ–ª–µ–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ–π –∑–∞–¥–µ—Ä–∂–∫–∏ –º–µ–∂–¥—É —Å–º–µ–Ω–æ–π –∞–∫–∫–∞—É–Ω—Ç–æ–≤
                if (i < privateKeys.length - 1) {
                    logger.step('--------------------------------------------------');
                    logger.step(`–ê–ö–ö–ê–£–ù–¢ ${i + 1} –ó–ê–í–ï–†–®–ï–ù. –û–∂–∏–¥–∞–Ω–∏–µ 30 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º –ê–ö–ö–ê–£–ù–¢–ê ${i + 2}...`);
                    logger.step('--------------------------------------------------');
                    await sleep(30000);
                }
            }
            
            logger.summary("--- –í—Å–µ –∫–æ—à–µ–ª—å–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã –¥–ª—è –í–°–ï–• –∏–≥—Ä. –¶–∏–∫–ª –∑–∞–≤–µ—Ä—à–µ–Ω. ---");

        } catch (error) {
            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –≤–æ–∑–Ω–∏–∫–Ω—É—Ç—å –≤–æ –≤—Ä–µ–º—è —Ü–∏–∫–ª–∞
            logger.critical(`–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –í –¶–ò–ö–õ–ï: ${error.message}`);
        }

        const endTime = Date.now();
        const duration = endTime - startTime;
        let remainingDelay = DAILY_DELAY_MS - duration;

        if (remainingDelay < 0) {
            remainingDelay = 10000; // Minimal 10 detik jeda jika durasi melebihi 24 jam
            logger.warn(`–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ü–∏–∫–ª–∞ (${(duration / 3600000).toFixed(2)} —á) –ø—Ä–µ–≤—ã—Å–∏–ª–∞ 24 —á–∞—Å–∞. –ù–∞—á–∏–Ω–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π —Ü–∏–∫–ª —á–µ—Ä–µ–∑ ${remainingDelay / 1000} —Å–µ–∫—É–Ω–¥.`);
        } else {
            const minutesLeft = Math.ceil(remainingDelay / 1000 / 60);
            logger.step(`–û–∂–∏–¥–∞–Ω–∏–µ ${minutesLeft} –º–∏–Ω—É—Ç –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ü–∏–∫–ª–∞ (24 —á–∞—Å–∞)...`);
        }

        await sleep(remainingDelay);
    }
};

main();
